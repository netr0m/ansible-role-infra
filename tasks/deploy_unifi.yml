---
- name: Ensure unifi directory is present
  ansible.builtin.file:
    path: "{{ infra_unifi_directory_path }}"
    state: directory
    owner: "{{ infra_unifi_directory_owner }}"
    group: "{{ infra_unifi_directory_group }}"
    mode: "{{ infra_unifi_directory_mode }}"

- name: Add Authentik auth middleware
  when: infra_unifi_use_authentik
  ansible.builtin.set_fact:
    infra_unifi_traefik_middlewares: "{{ infra_unifi_traefik_middlewares + [infra_unifi_auth_mwr] }}"

- name: Manage service files
  block:
    - name: Write unifi DB password secret to file
      ansible.builtin.template:
        src: secret.j2
        dest: "{{ infra_unifi_db_password_file_path }}"
        owner: "{{ infra_unifi_directory_owner }}"
        group: "{{ infra_unifi_directory_group }}"
        mode: "{{ infra_unifi_secret_file_mode }}"
        backup: true
      vars:
        _secret: "{{ infra_unifi_db_password | urlencode }}"
      register: unifi_db_password_file_output

    - name: Write init-mongo.js script to file
      ansible.builtin.template:
        src: unifi-init-mongo.js.j2
        dest: "{{ infra_unifi_db_init_mongo_path }}"
        owner: "{{ infra_unifi_directory_owner }}"
        group: "{{ infra_unifi_directory_group }}"
        mode: "{{ infra_unifi_db_init_mongo_file_mode }}"
        backup: true
      register: unifi_db_init_script_file_output

    - name: Write unifi environment variables to file
      ansible.builtin.template:
        src: template.env.j2
        dest: "{{ infra_unifi_env_file_path }}"
        owner: "{{ infra_unifi_directory_owner }}"
        group: "{{ infra_unifi_directory_group }}"
        mode: "{{ infra_unifi_env_file_mode }}"
        backup: true
      vars:
        _env_vars: "{{ infra_unifi_env_vars }}"
      register: unifi_env_file_output

    - name: Copy compose services file into place
      ansible.builtin.template:
        src: compose/unifi.yml.j2
        dest: "{{ infra_unifi_compose_path }}"
        owner: "{{ infra_unifi_directory_owner }}"
        group: "{{ infra_unifi_directory_group }}"
        mode: "{{ infra_unifi_file_mode }}"
        backup: true
        validate: docker compose -f %s config -q
      register: compose_file_output

- name: Take down services due to changed compose file
  community.docker.docker_compose_v2:
    project_src: "{{ infra_unifi_directory_path }}"
    files: "{{ compose_file_output.backup_file }}"
    state: absent
    remove_orphans: true
  when: compose_file_output.backup_file is defined

- name: Pull container images
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
  with_items:
    - "{{ infra_unifi_db_container_image }}"
    - "{{ infra_unifi_container_image }}"

- name: Deploy unifi services
  community.docker.docker_compose_v2:
    project_src: "{{ infra_unifi_directory_path }}"
    state: "{{ 'present' if infra_use_unifi else 'absent' }}"
    wait: true
    wait_timeout: "{{ infra_compose_wait_timeout }}"
  register: deploy_unifi_services_output

- name: Add docker-volume-backup entries
  when: infra_backup_enabled
  ansible.builtin.set_fact:
    infra_docker_volume_backup_services_unifi:
      - service: "{{ infra_unifi_service_name }}"
        volumes:
          - "{{ infra_unifi_volume_name_config }}"
          - "{{ infra_unifi_db_volume_name_data }}"
        stop:
          - "{{ infra_unifi_service_name }}"
...
