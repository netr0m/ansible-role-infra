---
- name: Ensure pihole directory is present
  ansible.builtin.file:
    path: "{{ infra_pihole_directory_path }}"
    state: directory
    owner: "{{ infra_pihole_directory_owner }}"
    group: "{{ infra_pihole_directory_group }}"
    mode: "{{ infra_pihole_directory_mode }}"

- name: Ensure pihole dnsmasq.d directory is present
  ansible.builtin.file:
    path: "{{ infra_pihole_dnsmasq_d_directory_path }}"
    state: directory
    owner: "{{ infra_pihole_dnsmasq_d_directory_owner }}"
    group: "{{ infra_pihole_dnsmasq_d_directory_group }}"
    mode: "{{ infra_pihole_dnsmasq_d_directory_mode }}"

- name: Query for docker network details of '{{ svc_docker_network_name }}'
  community.docker.docker_network_info:
    name: "{{ svc_docker_network_name }}"
  register: _svc_net_res

- name: Set svc_network_subnet fact
  ansible.builtin.set_fact:
    _svc_network_subnet: "{{ _svc_net_res.network.IPAM.Config[0].Subnet }}"

- name: Set _svc_pihole_container_ip fact
  when: _svc_network_subnet != ""
  ansible.builtin.set_fact:
    _svc_pihole_container_ip: "{{ (_svc_network_subnet | split('.'))[:3] | join('.') ~ '.53' }}"

- name: Manage unbound configuration
  when: infra_use_unbound
  block:
    - name: Ensure unbound directory is present
      ansible.builtin.file:
        path: "{{ infra_unbound_directory_path }}"
        state: directory
        owner: "{{ infra_unbound_directory_owner }}"
        group: "{{ infra_unbound_directory_group }}"
        mode: "{{ infra_unbound_directory_mode }}"

    - name: Ensure unbound.conf.d subdirectory is present
      ansible.builtin.file:
        path: "{{ infra_unbound_conf_d_directory_path }}"
        state: directory
        owner: "{{ infra_unbound_directory_owner }}"
        group: "{{ infra_unbound_directory_group }}"
        mode: "{{ infra_unbound_conf_d_directory_mode }}"

    - name: Write unbound config to file
      ansible.builtin.template:
        src: etc/unbound/unbound.conf.j2
        dest: "{{ infra_unbound_conf_file_path }}"
        owner: "{{ infra_unbound_directory_owner }}"
        group: "{{ infra_unbound_directory_group }}"
        mode: "{{ infra_unbound_file_mode }}"
        backup: true
      register: unbound_config_file_output

    - name: Write unbound pi-hole.conf to file
      ansible.builtin.template:
        src: etc/unbound/unbound.conf.d/pi-hole.conf.j2
        dest: "{{ infra_unbound_pihole_conf_file_path }}"
        owner: "{{ infra_unbound_directory_owner }}"
        group: "{{ infra_unbound_directory_group }}"
        mode: "{{ infra_unbound_file_mode }}"
        backup: true
      register: unbound_pihole_conf_file_output

    - name: Set DNS environment variable setting for pihole
      ansible.builtin.set_fact:
        infra_pihole_env_vars_dns:
          PIHOLE_DNS_: "{{ infra_unbound_service_name }}#{{ infra_unbound_listening_port }}"

- name: Manage service files
  block:
    - name: Write pihole password secret to file
      ansible.builtin.template:
        src: secret.j2
        dest: "{{ infra_pihole_password_file_path }}"
        owner: "{{ infra_pihole_directory_owner }}"
        group: "{{ infra_pihole_directory_group }}"
        mode: "{{ infra_pihole_secret_file_mode }}"
        backup: true
      vars:
        _secret: "{{ infra_pihole_password }}"
      register: pihole_password_file_output

    - name: Write pihole environment variables to file
      ansible.builtin.template:
        src: template.env.j2
        dest: "{{ infra_pihole_env_file_path }}"
        owner: "{{ infra_pihole_directory_owner }}"
        group: "{{ infra_pihole_directory_group }}"
        mode: "{{ infra_pihole_env_file_mode }}"
        backup: true
      vars:
        _env_vars: "{{ infra_pihole_settings | combine(infra_pihole_env_vars) | combine(infra_pihole_env_vars_dns) }}"
      register: pihole_env_file_output

    - name: Write unbound environment variables to file
      when: infra_use_unbound
      ansible.builtin.template:
        src: template.env.j2
        dest: "{{ infra_unbound_env_file_path }}"
        owner: "{{ infra_unbound_directory_owner }}"
        group: "{{ infra_unbound_directory_group }}"
        mode: "{{ infra_unbound_env_file_mode }}"
        backup: true
      vars:
        _env_vars: "{{ infra_unbound_env_vars }}"
      register: unbound_env_file_output

    - name: Copy compose services file into place
      ansible.builtin.template:
        src: compose/pihole.yml.j2
        dest: "{{ infra_pihole_compose_path }}"
        owner: "{{ infra_pihole_directory_owner }}"
        group: "{{ infra_pihole_directory_group }}"
        mode: "{{ infra_pihole_file_mode }}"
        backup: true
        validate: docker compose -f %s config -q
      register: compose_file_output

- name: Take down services due to changed compose file
  community.docker.docker_compose_v2:
    project_src: "{{ infra_pihole_directory_path }}"
    files: "{{ compose_file_output.backup_file }}"
    state: absent
    remove_orphans: true
  when: compose_file_output.backup_file is defined

- name: Pull container images
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
  with_items:
    - "{{ infra_unbound_container_image }}"
    - "{{ infra_pihole_container_image }}"

- name: Ensure systemd-resolved service is stopped
  ansible.builtin.systemd:
    name: systemd-resolved
    state: stopped
    enabled: false

- name: Deploy pihole services
  community.docker.docker_compose_v2:
    project_src: "{{ infra_pihole_directory_path }}"
    state: "{{ 'present' if infra_use_pihole else 'absent' }}"
    wait: true
    wait_timeout: "{{ infra_pihole_compose_wait_timeout | default(infra_compose_wait_timeout) }}"
  register: deploy_pihole_services_output

- name: Manage pi-hole dnsmasq configuration
  block:
    - name: Write dnsmasq.d edns config to file
      when: infra_use_unbound
      ansible.builtin.template:
        src: etc/dnsmasq.d/99-edns.conf.j2
        dest: "{{ infra_pihole_dnsmasq_edns_conf_file_path }}"
        owner: "{{ infra_pihole_dnsmasq_edns_conf_file_owner }}"
        group: "{{ infra_pihole_dnsmasq_edns_conf_file_group }}"
        mode: "{{ infra_pihole_dnsmasq_edns_conf_file_mode }}"
        backup: true
      register: pihole_dnsmasq_edns_config_file_output

    - name: Remove dnsmasq.d edns config file state
      when: not infra_use_unbound
      ansible.builtin.file:
        path: "{{ infra_pihole_dnsmasq_edns_conf_file_path }}"
        state: absent

- name: Add Pihole to the container DNS server list
  when: infra_containers_use_pihole_dns and infra_use_pihole
  block:
    - name: Get pihole container settings
      block:
        - name: Query for pihole container
          community.docker.docker_container_info:
            name: "{{ infra_pihole_service_name }}"
          register: pihole_container_output

        - name: Set pihole container IP fact
          ansible.builtin.set_fact:
            pihole_container_ip: "{{ pihole_container_output.container.NetworkSettings.Networks[svc_docker_network_name].IPAddress }}"

    - name: Update the DNS server variable to include pihole
      when: pihole_container_ip is defined
      ansible.builtin.set_fact:
        infra_container_dns_servers: "{{ [pihole_container_ip] + infra_container_dns_servers }}"

- name: Add docker-volume-backup entries
  when: infra_backup_enabled
  ansible.builtin.set_fact:
    infra_docker_volume_backup_services_pihole:
      - service: "{{ infra_pihole_service_name }}"
        volumes:
          - "{{ infra_pihole_volume_name_data }}"
        stop:
          - "{{ infra_pihole_service_name }}"
...
